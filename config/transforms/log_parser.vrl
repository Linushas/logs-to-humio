.tags.parse_regex_error = true
.vector_read_timestamp = now()
if exists(.message) && !is_empty(strip_whitespace(string!(.message))) {
  structured, err = parse_regex(string!(.message), r'(?s)^(?P<loglevel>TRACE|FATAL|INFO|ERROR|WARN|DEBUG)\s+(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}) \[\[(?P<runtime>[^\]]+)\]\.(?P<worker>[^:]+): \[(?P<app>[^\]]+)\]\.(?P<flow>.+)\.(?P<threadPool>[^\s]+) @(?P<thread>[^\]]+)\] \[event:(?P<event>[^\]]+)\] (?P<class>[^:]+):\s*(?P<msg>.*)$')

  if err == null && structured != null {
    .loglevel = structured.loglevel
    if structured.timestamp != null {
      parsed_timestamp = parse_timestamp!(structured.timestamp, "%Y-%m-%d %H:%M:%S,%3f", "Europe/Stockholm")
      .@timestamp = format_timestamp!(parsed_timestamp, "%+")
    }
    .worker = structured.worker
    .app = structured.app
    .flow = structured.flow
    .threadPool = structured.threadPool
    .thread = structured.thread
    .event = structured.event
    .class = structured.class
    .messageInfo = structured.msg
    .tags.parse_regex_error = false
  } else {
    structured, err = parse_regex(.message, r'(?s)^(?P<loglevel>TRACE|FATAL|INFO|ERROR|WARN|DEBUG)\s+(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3})\s*(?P<msg>.*)$')
    if err == null && structured != null {
      .loglevel = structured.loglevel
      if structured.timestamp != null {
        parsed_timestamp = parse_timestamp!(structured.timestamp, "%Y-%m-%d %H:%M:%S,%3f", "Europe/Stockholm")
        .@timestamp = format_timestamp!(parsed_timestamp, "%+")
      }
      .messageInfo = structured.msg
      .tags.parse_regex_error = true
    }
  }
}

del(.source_type)